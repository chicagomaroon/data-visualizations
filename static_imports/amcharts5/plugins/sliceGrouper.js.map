{"version":3,"file":"plugins/sliceGrouper.js","mappings":"+LAuEO,MAAMA,UAAqBC,EAAA,GAAlC,c,oBAWC,4C,wDAuMD,CApMWC,YACTC,MAAMD,YACNE,KAAKC,eAAe,YAAa,GACjCD,KAAKC,eAAe,YAAa,SACjCD,KAAKC,eAAe,gBAAiB,QACrCD,KAAKE,iBACLF,KAAKG,MAAMC,YAAYJ,KACxB,CAEQE,iBAEP,GAAsB,SADAF,KAAKK,IAAI,iBACD,CAC7B,MAAMC,EAAYN,KAAKO,KAAKC,iBAC5BR,KAAKS,cAAgBH,EAAUI,SAASC,KAAKC,EAAA,MAAWZ,KAAKG,MAAO,CACnEU,UAAW,CAAC,QACZC,KAAMC,EAAA,MAAaf,KAAKG,MAAO,CAC9BU,UAAW,CAAC,SAAU,aAGxBb,KAAKS,cAAcO,OACnBhB,KAAKS,cAAcQ,OAAOC,GAAG,SAAS,KACrClB,KAAKmB,SAAS,G,CAIjB,CAEQC,aACP,MAAMC,EAASrB,KAAKK,IAAI,UAExB,GAAIgB,EAAQ,CAGX,IAAIC,EAAgBtB,KAAKuB,WAAW,iBACpC,IAAKD,EAAe,CAEnB,MAAME,EAASxB,KAAKK,IAAI,UAClBoB,EAAgBJ,EAAOhB,IAAI,gBAAiB,YAC5CqB,EAAaL,EAAOhB,IAAI,aAAc,SAGtCsB,EAAsB,CAAC,EAC7BA,EAAeF,GAAiBzB,KAAKK,IAAI,YAAa,IACtDsB,EAAeD,GAAc,EAC7BL,EAAOO,KAAKjB,KAAKgB,GAEjBL,EAAgBD,EAAOQ,UAAUR,EAAOQ,UAAUC,OAAS,GAE3DR,EAAcjB,IAAI,SAASY,OAAOC,GAAG,SAAS,KAC7ClB,KAAK+B,aAAa,IAGnB/B,KAAKgC,WAAW,gBAAiBV,GAG7BE,IACHA,EAAOI,KAAKjB,KAAKW,GAGjBA,EAAcJ,GAAG,WAAYe,IACxBA,GACHjC,KAAKmB,S,KAQT,MAAMe,EAAYlC,KAAKK,IAAI,YAAa,GAClC8B,EAAQnC,KAAKK,IAAI,QAAS,KAC1B+B,EAAuB,GACvBC,EAAsB,GAC5B,IAAIC,EAAa,GACbJ,GAAaC,KAEhB,OAAYd,EAAOQ,WAAW,CAACU,EAAMC,KACpC,MAAMC,EAAiBF,EAAKlC,IAAI,mBAC1BkC,EAAKlC,IAAI,sBAAwB6B,GAAeM,EAASL,EAAQ,IAAQb,IAAkBiB,GAChGD,GAAcC,EAAKlC,IAAI,QAAS,GAChCgC,EAAe1B,KAAK4B,GACpBA,EAAKvB,KAAK,GACNyB,GACHA,EAAepC,IAAI,iBAAiBW,KAAK,KAI1CoB,EAAgBzB,KAAK4B,GACjBE,GACHA,EAAepC,IAAI,iBAAiBqC,KAAK,G,IAK5C1C,KAAKgC,WAAW,kBAAmBI,GACnCpC,KAAKgC,WAAW,iBAAkBK,GAClCrC,KAAK2C,oBAAoBL,G,CAK5B,CAKOnB,UACN,MAAMG,EAAgBtB,KAAKuB,WAAW,iBAMtC,GALID,GACHA,EAAcoB,OAIM,QADC1C,KAAKK,IAAI,iBACF,CAC5B,MAAM+B,EAAuBpC,KAAKuB,WAAW,kBAAmB,IAChE,OAAYa,GAAiB,CAACG,EAAWK,KACxCL,EAAKG,MAAM,G,CAIb,MAAML,EAAsBrC,KAAKuB,WAAW,iBAAkB,IAC9D,OAAYc,GAAgB,CAACE,EAAWK,KACvCL,EAAKvB,MAAM,IAGRhB,KAAKS,eACRT,KAAKS,cAAcO,MAErB,CAEQ2B,oBAAoBL,GAC3B,MAAMjB,EAASrB,KAAKK,IAAI,UACxB,GAAIgB,EAAQ,CACX,MAAMM,EAAsB,CAAC,EACvBF,EAAgBJ,EAAOhB,IAAI,gBAAiB,YAC5CqB,EAAaL,EAAOhB,IAAI,aAAc,SAC5CsB,EAAeF,GAAiBzB,KAAKK,IAAI,YAAa,IACtDsB,EAAeD,GAAcY,EAC7BjB,EAAOO,KAAKiB,SAASxB,EAAOO,KAAKE,OAAS,EAAGH,GAE7C,MAAML,EAAgBtB,KAAKuB,WAAW,iBACpB,GAAde,EACHhB,EAAeN,KAAK,GAEZM,EAAewB,YACvBxB,EAAeoB,OAIK,QADC1C,KAAKK,IAAI,kBAE9BiB,EAAejB,IAAI,SAAS0C,IAAI,YAAa,O,CAGhD,CAEQhB,cACP,MAAMiB,EAAgBhD,KAAKK,IAAI,iBACzBgC,EAAiBrC,KAAKuB,WAAW,kBAEvC,GAAqB,QAAjByB,GAA4BX,GAA2C,GAAzBA,EAAeP,OAChE,OAGD,MAAMT,EAASrB,KAAKK,IAAI,UACFL,KAAKuB,WAAW,iBAGvBP,OAGf,OAAYK,EAAQQ,WAAYU,KACQ,IAAnCF,EAAgBY,QAAQV,GAC3BA,EAAKG,OAEoB,QAAjBM,GACRT,EAAKvB,M,IAIPhB,KAAKS,cAAeiC,MACrB,CAEOQ,iBAGN,GAFAnD,MAAMmD,iBAEFlD,KAAKmD,QAAQ,UAAW,CAC3B,MAAM9B,EAASrB,KAAKK,IAAI,UACpBgB,GACHA,EAAOJ,OAAOC,GAAG,iBAAkBkC,IAClCpD,KAAKoB,YAAY,G,CAKrB,EA/MA,qC,gDAAkC,iBAClC,sC,gDAA0CvB,EAAA,qBAAyB,CAACD,EAAayD,a,oFCxE3E,MAAMC,E","sources":["webpack://@amcharts/amcharts5/./src/.internal/plugins/sliceGrouper/SliceGrouper.ts","webpack://@amcharts/amcharts5/./tmp/webpack/plugins/sliceGrouper.js"],"sourcesContent":["import type { DataItem } from \"../../core/render/Component\";\nimport type { PercentSeries, IPercentSeriesDataItem } from \"../../charts/percent/PercentSeries\";\nimport type { Legend } from \"../../core/render/Legend\";\n\nimport { Button } from \"../../core/render/Button\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport { Entity, IEntitySettings, IEntityPrivate, IEntityEvents } from \"../../core/util/Entity\"\n\nimport * as $array from \"../../core/util/Array\";\n\n\nexport interface ISliceGrouperSettings extends IEntitySettings {\n\n\t/**\n\t * A series that will be used to group slices on.\n\t */\n\tseries?: PercentSeries;\n\n\t/**\n\t * If set, plugin will try to manipulate the items in legend, such as\n\t * adding group slice, hiding items for small slices, etc.\n\t */\n\tlegend?: Legend;\n\n\t/**\n\t * Any slice which has percent value less than this setting will be grouped.\n\t * \n\t * @default 5\n\t */\n\tthreshold?: number;\n\n\t/**\n\t * If set, only X first slices will be left as they are. The rest of the\n\t * slices will be grouped.\n\t */\n\tlimit?: number;\n\n\t/**\n\t * Name (category) of the group slice.\n\t *\n\t * @default \"Other\"\n\t */\n\tgroupName?: string;\n\n\t/**\n\t * What happens when group slice is clicked.\n\t *\n\t * * `\"none\"` (default) - nothing.\n\t * * `\"break\"` - underlying small slices are shown.\n\t * * `\"zoom\"` - series shows only small slies (big ones are hidden).\n\t */\n\tclickBehavior?: \"none\" | \"break\" | \"zoom\";\n\n}\n\nexport interface ISliceGrouperPrivate extends IEntityPrivate {\n\tgroupDataItem?: DataItem<IPercentSeriesDataItem>;\n\tnormalDataItems?: DataItem<IPercentSeriesDataItem>[];\n\tsmallDataItems?: DataItem<IPercentSeriesDataItem>[];\n}\n\nexport interface ISliceGrouperEvents extends IEntityEvents {\n}\n\n\n/**\n * A plugin that can be used to automatically group small slices on percent\n * charts into a single slice.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/grouping-slices/} for more info\n */\nexport class SliceGrouper extends Entity {\n\tpublic static className: string = \"SliceGrouper\";\n\tpublic static classNames: Array<string> = Entity.classNames.concat([SliceGrouper.className]);\n\n\tdeclare public _settings: ISliceGrouperSettings;\n\tdeclare public _privateSettings: ISliceGrouperPrivate;\n\tdeclare public _events: ISliceGrouperEvents;\n\n\t/**\n\t * A button that is shown when chart small buttons are visible.\n\t */\n\tpublic zoomOutButton?: Button;\n\n\n\tprotected _afterNew(): void {\n\t\tsuper._afterNew();\n\t\tthis._setRawDefault(\"threshold\", 5);\n\t\tthis._setRawDefault(\"groupName\", \"Other\");\n\t\tthis._setRawDefault(\"clickBehavior\", \"none\");\n\t\tthis.initZoomButton();\n\t\tthis._root.addDisposer(this);\n\t}\n\n\tprivate initZoomButton(): void {\n\t\tconst clickBehavior = this.get(\"clickBehavior\");\n\t\tif (clickBehavior !== \"none\") {\n\t\t\tconst container = this.root.tooltipContainer;\n\t\t\tthis.zoomOutButton = container.children.push(Button.new(this._root, {\n\t\t\t\tthemeTags: [\"zoom\"],\n\t\t\t\ticon: Graphics.new(this._root, {\n\t\t\t\t\tthemeTags: [\"button\", \"icon\"]\n\t\t\t\t})\n\t\t\t}));\n\t\t\tthis.zoomOutButton.hide();\n\t\t\tthis.zoomOutButton.events.on(\"click\", () => {\n\t\t\t\tthis.zoomOut();\n\t\t\t});\n\t\t}\n\n\t}\n\n\tprivate handleData(): void {\n\t\tconst series = this.get(\"series\");\n\n\t\tif (series) {\n\n\t\t\t// Create group data item if not yet available\n\t\t\tlet groupDataItem = this.getPrivate(\"groupDataItem\");\n\t\t\tif (!groupDataItem) {\n\n\t\t\t\tconst legend = this.get(\"legend\");\n\t\t\t\tconst categoryField = series.get(\"categoryField\", \"category\");\n\t\t\t\tconst valueField = series.get(\"valueField\", \"value\");\n\n\t\t\t\t// Add slice\n\t\t\t\tconst groupSliceData: any = {};\n\t\t\t\tgroupSliceData[categoryField] = this.get(\"groupName\", \"\");\n\t\t\t\tgroupSliceData[valueField] = 0;\n\t\t\t\tseries.data.push(groupSliceData);\n\n\t\t\t\tgroupDataItem = series.dataItems[series.dataItems.length - 1];\n\n\t\t\t\tgroupDataItem.get(\"slice\").events.on(\"click\", () => {\n\t\t\t\t\tthis.handleClick();\n\t\t\t\t});\n\n\t\t\t\tthis.setPrivate(\"groupDataItem\", groupDataItem);\n\n\t\t\t\t// Add to legend\n\t\t\t\tif (legend) {\n\t\t\t\t\tlegend.data.push(groupDataItem);\n\n\t\t\t\t\t//const legendDataItem = groupDataItem.get(\"legendDataItem\");\n\t\t\t\t\tgroupDataItem.on(\"visible\", (visible) => {\n\t\t\t\t\t\tif (visible) {\n\t\t\t\t\t\t\tthis.zoomOut();\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Recalculate group value and decorate small slices as necessary\n\t\t\tconst threshold = this.get(\"threshold\", 0);\n\t\t\tconst limit = this.get(\"limit\", 1000);\n\t\t\tconst normalDataItems: any = [];\n\t\t\tconst smallDataItems: any = [];\n\t\t\tlet groupValue = 0;\n\t\t\tif (threshold || limit) {\n\n\t\t\t\t$array.each(series.dataItems, (item, index) => {\n\t\t\t\t\tconst legendDataItem = item.get(\"legendDataItem\");\n\t\t\t\t\tif (((item.get(\"valuePercentTotal\") <= threshold) || (index > (limit - 1))) && groupDataItem !== item) {\n\t\t\t\t\t\tgroupValue += item.get(\"value\", 0);\n\t\t\t\t\t\tsmallDataItems.push(item);\n\t\t\t\t\t\titem.hide(0);\n\t\t\t\t\t\tif (legendDataItem) {\n\t\t\t\t\t\t\tlegendDataItem.get(\"itemContainer\").hide(0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tnormalDataItems.push(item);\n\t\t\t\t\t\tif (legendDataItem) {\n\t\t\t\t\t\t\tlegendDataItem.get(\"itemContainer\").show(0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tthis.setPrivate(\"normalDataItems\", normalDataItems);\n\t\t\t\tthis.setPrivate(\"smallDataItems\", smallDataItems);\n\t\t\t\tthis.updateGroupDataItem(groupValue);\n\n\t\t\t}\n\n\t\t}\n\t}\n\n\t/**\n\t * Resets slice setup to original grouping state.\n\t */\n\tpublic zoomOut(): void {\n\t\tconst groupDataItem = this.getPrivate(\"groupDataItem\");\n\t\tif (groupDataItem) {\n\t\t\tgroupDataItem.show();\n\t\t}\n\n\t\tconst clickBehavior = this.get(\"clickBehavior\");\n\t\tif (clickBehavior == \"zoom\") {\n\t\t\tconst normalDataItems: any = this.getPrivate(\"normalDataItems\", []);\n\t\t\t$array.each(normalDataItems, (item: any, _index) => {\n\t\t\t\titem.show();\n\t\t\t});\n\t\t}\n\n\t\tconst smallDataItems: any = this.getPrivate(\"smallDataItems\", []);\n\t\t$array.each(smallDataItems, (item: any, _index) => {\n\t\t\titem.hide();\n\t\t});\n\n\t\tif (this.zoomOutButton) {\n\t\t\tthis.zoomOutButton.hide();\n\t\t}\n\t}\n\n\tprivate updateGroupDataItem(groupValue: number): void {\n\t\tconst series = this.get(\"series\");\n\t\tif (series) {\n\t\t\tconst groupSliceData: any = {};\n\t\t\tconst categoryField = series.get(\"categoryField\", \"category\");\n\t\t\tconst valueField = series.get(\"valueField\", \"value\");\n\t\t\tgroupSliceData[categoryField] = this.get(\"groupName\", \"\");\n\t\t\tgroupSliceData[valueField] = groupValue;\n\t\t\tseries.data.setIndex(series.data.length - 1, groupSliceData);\n\n\t\t\tconst groupDataItem = this.getPrivate(\"groupDataItem\");\n\t\t\tif (groupValue == 0) {\n\t\t\t\tgroupDataItem!.hide(0);\n\t\t\t}\n\t\t\telse if (groupDataItem!.isHidden()) {\n\t\t\t\tgroupDataItem!.show();\n\t\t\t}\n\n\t\t\tconst clickBehavior = this.get(\"clickBehavior\");\n\t\t\tif (clickBehavior != \"none\") {\n\t\t\t\tgroupDataItem!.get(\"slice\").set(\"toggleKey\", \"none\");\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate handleClick(): void {\n\t\tconst clickBehavior = this.get(\"clickBehavior\");\n\t\tconst smallDataItems = this.getPrivate(\"smallDataItems\");\n\n\t\tif (clickBehavior == \"none\" || (smallDataItems && smallDataItems.length == 0)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst series = this.get(\"series\");\n\t\tconst groupDataItem = this.getPrivate(\"groupDataItem\");\n\n\t\t// Hide group slice\n\t\tgroupDataItem!.hide();\n\n\t\t// Reveal small slices\n\t\t$array.each(series!.dataItems, (item) => {\n\t\t\tif (smallDataItems!.indexOf(item) !== -1) {\n\t\t\t\titem.show();\n\t\t\t}\n\t\t\telse if (clickBehavior == \"zoom\") {\n\t\t\t\titem.hide();\n\t\t\t}\n\t\t});\n\n\t\tthis.zoomOutButton!.show();\n\t}\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"series\")) {\n\t\t\tconst series = this.get(\"series\");\n\t\t\tif (series) {\n\t\t\t\tseries.events.on(\"datavalidated\", (_ev) => {\n\t\t\t\t\tthis.handleData();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t}\n\n}","import * as m from \"./../../../dist/es2015/plugins/sliceGrouper.js\";\nexport const am5plugins_sliceGrouper = m;"],"names":["SliceGrouper","Entity","_afterNew","super","this","_setRawDefault","initZoomButton","_root","addDisposer","get","container","root","tooltipContainer","zoomOutButton","children","push","Button","themeTags","icon","Graphics","hide","events","on","zoomOut","handleData","series","groupDataItem","getPrivate","legend","categoryField","valueField","groupSliceData","data","dataItems","length","handleClick","setPrivate","visible","threshold","limit","normalDataItems","smallDataItems","groupValue","item","index","legendDataItem","show","updateGroupDataItem","_index","setIndex","isHidden","set","clickBehavior","indexOf","_beforeChanged","isDirty","_ev","className","am5plugins_sliceGrouper"],"sourceRoot":""}