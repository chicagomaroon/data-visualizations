{"version":3,"file":"radar.js","mappings":"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","sources":["webpack://@amcharts/amcharts5/./src/.internal/charts/radar/AxisRendererCircular.ts","webpack://@amcharts/amcharts5/./src/.internal/charts/radar/AxisRendererRadial.ts","webpack://@amcharts/amcharts5/./src/.internal/charts/radar/ClockHand.ts","webpack://@amcharts/amcharts5/./src/.internal/charts/radar/RadarDefaultTheme.ts","webpack://@amcharts/amcharts5/./src/.internal/charts/radar/RadarChart.ts","webpack://@amcharts/amcharts5/./src/.internal/charts/radar/RadarColumnSeries.ts","webpack://@amcharts/amcharts5/./src/.internal/charts/radar/RadarCursor.ts","webpack://@amcharts/amcharts5/./src/.internal/charts/radar/RadarLineSeries.ts","webpack://@amcharts/amcharts5/./node_modules/d3-shape/src/noop.js","webpack://@amcharts/amcharts5/./node_modules/d3-shape/src/curve/cardinalClosed.js","webpack://@amcharts/amcharts5/./src/.internal/charts/radar/SmoothedRadarLineSeries.ts","webpack://@amcharts/amcharts5/./tmp/webpack/radar.js"],"sourcesContent":["import type { Axis } from \"../xy/axes/Axis\";\nimport type { RadarChart } from \"./RadarChart\";\nimport type { Grid } from \"../xy/axes/Grid\";\nimport type { IPoint } from \"../../core/util/IPoint\";\nimport type { Graphics } from \"../../core/render/Graphics\";\nimport type { AxisTick } from \"../xy/axes/AxisTick\";\nimport type { AxisBullet } from \"../xy/axes/AxisBullet\";\nimport type { Tooltip } from \"../../core/render/Tooltip\";\n\nimport { Slice } from \"../../core/render/Slice\";\nimport { AxisRenderer, IAxisRendererSettings, IAxisRendererPrivate } from \"../xy/axes/AxisRenderer\";\nimport { AxisLabelRadial } from \"../xy/axes/AxisLabelRadial\";\nimport { Percent, p100 } from \"../../core/util/Percent\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { Template } from \"../../core/util/Template\";\nimport { arc } from \"d3-shape\";\n\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $math from \"../../core/util/Math\";\n\n\nexport interface IAxisRendererCircularSettings extends IAxisRendererSettings {\n\n\t/**\n\t * Outer radius of the axis.\n\t *\n\t * If set in percent, it will be relative to chart's own `radius`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/radar-axes/#Axis_radii_and_angles} for more info\n\t */\n\tradius?: number | Percent;\n\n\t/**\n\t * Inner radius of the axis.\n\t *\n\t * If set in percent, it will be relative to chart's own `innerRadius`.\n\t *\n\t * If value is negative, inner radius will be calculated from the outer edge.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/radar-axes/#Axis_radii_and_angles} for more info\n\t */\n\tinnerRadius?: number | Percent;\n\n\t/**\n\t * Series start angle.\n\t *\n\t * If not set, will use chart's `startAngle.`\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/radar-axes/#Axis_radii_and_angles} for more info\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * Series end angle.\n\t *\n\t * If not set, will use chart's `endAngle.`\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/radar-axes/#Axis_radii_and_angles} for more info\n\t */\n\tendAngle?: number;\n\n\t/**\n\t * @todo am: needs description\n\t */\n\taxisAngle?: number;\n\n}\n\nexport interface IAxisRendererCircularPrivate extends IAxisRendererPrivate {\n\n\t/**\n\t * Actual radius of the label in pixels.\n\t */\n\tradius?: number;\n\n\t/**\n\t * Actual inner radius of the label in pixels.\n\t */\n\tinnerRadius?: number;\n\n\t/**\n\t * Actual start angle of the label in degrees.\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * Actual end angle of the label in degrees.\n\t */\n\tendAngle?: number;\n\n}\n\n/**\n * Renderer for circular axes.\n */\nexport class AxisRendererCircular extends AxisRenderer {\n\n\t/**\n\t * Chart this renderer is for.\n\t */\n\tdeclare public chart: RadarChart | undefined;\n\n\t/**\n\t * A list of labels in the axis.\n\t *\n\t * `labels.template` can be used to configure labels.\n\t *\n\t * @default new ListTemplate<AxisLabelRadial>\n\t */\n\tpublic readonly labels: ListTemplate<AxisLabelRadial> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => AxisLabelRadial._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.labels.template.get(\"themeTags\", []), this.get(\"themeTags\", []))\n\t\t}, [this.labels.template])\n\t);\n\n\n\t/**\n\t * A list of fills in the axis.\n\t *\n\t * `axisFills.template` can be used to configure axis fills.\n\t *\n\t * @default new ListTemplate<Slice>\n\t */\n\tpublic readonly axisFills: ListTemplate<Slice> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => Slice._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.axisFills.template.get(\"themeTags\", [\"fill\"]), this.get(\"themeTags\", []))\n\t\t}, [this.axisFills.template])\n\t);\n\n\n\tpublic static className: string = \"AxisRendererCircular\";\n\tpublic static classNames: Array<string> = AxisRenderer.classNames.concat([AxisRendererCircular.className]);\n\n\tdeclare public _settings: IAxisRendererCircularSettings;\n\tdeclare public _privateSettings: IAxisRendererCircularPrivate;\n\n\tprotected _fillGenerator = arc();\n\n\tpublic _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"renderer\", \"circular\"]);\n\t\tsuper._afterNew();\n\t\tthis.setPrivateRaw(\"letter\", \"X\");\n\t\tthis.setRaw(\"position\", \"absolute\");\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this.isDirty(\"radius\") || this.isDirty(\"innerRadius\") || this.isDirty(\"startAngle\") || this.isDirty(\"endAngle\")) {\n\t\t\tthis.updateLayout();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLayout() {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tconst radius = chart.getPrivate(\"radius\", 0);\n\n\t\t\tlet r = $utils.relativeToValue(this.get(\"radius\", p100), radius);\n\n\t\t\tif (r < 0) {\n\t\t\t\tr = radius + r;\n\t\t\t}\n\n\t\t\tthis.setPrivate(\"radius\", r);\n\n\t\t\tlet ir = $utils.relativeToValue(this.get(\"innerRadius\", chart.getPrivate(\"innerRadius\", 0)), radius) * chart.getPrivate(\"irModifyer\", 1);\n\n\t\t\tif (ir < 0) {\n\t\t\t\tir = r + ir;\n\t\t\t}\n\n\t\t\tthis.setPrivate(\"innerRadius\", ir);\n\n\t\t\tlet startAngle = this.get(\"startAngle\", chart.get(\"startAngle\", -90));\n\t\t\tlet endAngle = this.get(\"endAngle\", chart.get(\"endAngle\", 270));\n\n\t\t\tthis.setPrivate(\"startAngle\", startAngle);\n\t\t\tthis.setPrivate(\"endAngle\", endAngle);\n\n\t\t\tthis.set(\"draw\", (display) => {\n\t\t\t\tconst p0 = this.positionToPoint(0);\n\t\t\t\tdisplay.moveTo(p0.x, p0.y);\n\n\t\t\t\tif (startAngle > endAngle) {\n\t\t\t\t\t[startAngle, endAngle] = [endAngle, startAngle];\n\t\t\t\t}\n\n\t\t\t\tdisplay.arc(0, 0, r, startAngle * $math.RADIANS, endAngle * $math.RADIANS);\n\t\t\t});\n\n\t\t\tthis.axis.markDirtySize();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateGrid(grid?: Grid, position?: number, endPosition?: number) {\n\t\tif (grid) {\n\n\t\t\tif (position == null) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = grid.get(\"location\", 0.5);\n\t\t\tif (endPosition != null && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tlet radius = this.getPrivate(\"radius\", 0);\n\t\t\tlet innerRadius = this.getPrivate(\"innerRadius\", 0);\n\t\t\tlet angle = this.positionToAngle(position);\n\n\t\t\tthis.toggleVisibility(grid, position, 0, 1);\n\n\t\t\tif (radius != null) {\n\t\t\t\tgrid.set(\"draw\", (display) => {\n\t\t\t\t\tdisplay.moveTo(innerRadius * $math.cos(angle), innerRadius * $math.sin(angle));\n\t\t\t\t\tdisplay.lineTo(radius * $math.cos(angle), radius * $math.sin(angle));\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Converts relative position to angle.\n\t *\n\t * @param   position  Position\n\t * @return            Angle\n\t */\n\tpublic positionToAngle(position: number): number {\n\t\tconst axis: Axis<AxisRenderer> = this.axis;\n\t\tconst startAngle = this.getPrivate(\"startAngle\", 0);\n\t\tconst endAngle = this.getPrivate(\"endAngle\", 360);\n\n\t\tconst start = axis.get(\"start\", 0);\n\t\tconst end = axis.get(\"end\", 1);\n\n\t\tlet arc = (endAngle - startAngle) / (end - start);\n\n\t\tlet angle: number;\n\n\t\tif (this.get(\"inversed\")) {\n\t\t\tangle = startAngle + (end - position) * arc;\n\t\t}\n\t\telse {\n\t\t\tangle = startAngle + (position - start) * arc;\n\t\t}\n\n\t\treturn angle;\n\t}\n\n\t// do not delete\n\tprotected _handleOpposite() { }\n\n\t/**\n\t * Converts relative position to an X/Y coordinate.\n\t *\n\t * @param   position  Position\n\t * @return            Point\n\t */\n\tpublic positionToPoint(position: number): IPoint {\n\t\tconst radius = this.getPrivate(\"radius\", 0);\n\t\tconst angle = this.positionToAngle(position);\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLabel(label?: AxisLabelRadial, position?: number, endPosition?: number, count?: number) {\n\t\tif (label) {\n\t\t\tif (position == null) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = 0.5;\n\t\t\tif (count != null && count > 1) {\n\t\t\t\tlocation = label.get(\"multiLocation\", location);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlocation = label.get(\"location\", location);\n\t\t\t}\n\n\t\t\tif (endPosition != null && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tconst radius = this.getPrivate(\"radius\", 0);\n\t\t\tconst innerRadius = this.getPrivate(\"innerRadius\", 0);\n\t\t\tconst angle = this.positionToAngle(position);\n\n\t\t\tlabel.setPrivate(\"radius\", radius);\n\t\t\tlabel.setPrivate(\"innerRadius\", innerRadius);\n\t\t\tlabel.set(\"labelAngle\", angle);\n\n\t\t\tthis.toggleVisibility(label, position, label.get(\"minPosition\", 0), label.get(\"maxPosition\", 1));\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic fillDrawMethod(fill: Graphics, startAngle?: number, endAngle?: number) {\n\t\tfill.set(\"draw\", (display) => {\n\t\t\tif (startAngle == null) {\n\t\t\t\tstartAngle = this.getPrivate(\"startAngle\", 0);\n\t\t\t}\n\t\t\tif (endAngle == null) {\n\t\t\t\tendAngle = this.getPrivate(\"endAngle\", 0);\n\t\t\t}\n\t\t\tconst y0 = this.getPrivate(\"innerRadius\", 0);\n\t\t\tconst y1 = this.getPrivate(\"radius\", 0);\n\t\t\tthis._fillGenerator.context(display as any);\n\t\t\tthis._fillGenerator({ innerRadius: y0, outerRadius: y1, startAngle: (startAngle + 90) * $math.RADIANS, endAngle: (endAngle + 90) * $math.RADIANS });\n\t\t})\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateTick(tick?: AxisTick, position?: number, endPosition?: number, count?: number) {\n\t\tif (tick) {\n\t\t\tif (position == null) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = 0.5;\n\t\t\tif (count != null && count > 1) {\n\t\t\t\tlocation = tick.get(\"multiLocation\", location);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlocation = tick.get(\"location\", location);\n\t\t\t}\n\n\t\t\tif (endPosition != null && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tlet length = tick.get(\"length\", 0);\n\t\t\tconst inside = tick.get(\"inside\");\n\n\t\t\tif (inside) {\n\t\t\t\tlength *= -1\n\t\t\t}\n\n\t\t\tlet radius = this.getPrivate(\"radius\", 0);\n\t\t\tlet angle = this.positionToAngle(position);\n\n\t\t\tthis.toggleVisibility(tick, position, tick.get(\"minPosition\", 0), tick.get(\"maxPosition\", 1));\n\n\t\t\tif (radius != null) {\n\t\t\t\ttick.set(\"draw\", (display) => {\n\t\t\t\t\tdisplay.moveTo(radius * $math.cos(angle), radius * $math.sin(angle));\n\t\t\t\t\tradius += length;\n\t\t\t\t\tdisplay.lineTo(radius * $math.cos(angle), radius * $math.sin(angle));\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateBullet(bullet?: AxisBullet, position?: number, endPosition?: number) {\n\t\tif (bullet) {\n\t\t\tconst sprite = bullet.get(\"sprite\");\n\n\t\t\tif (sprite) {\n\t\t\t\tif (position == null) {\n\t\t\t\t\tposition = 0;\n\t\t\t\t}\n\n\t\t\t\tlet location = bullet.get(\"location\", 0.5);\n\t\t\t\tif (endPosition != null && endPosition != position) {\n\t\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t\t}\n\n\t\t\t\tlet radius = this.getPrivate(\"radius\", 0);\n\t\t\t\tlet angle = this.positionToAngle(position);\n\n\t\t\t\tthis.toggleVisibility(sprite, position, 0, 1);\n\n\t\t\t\tsprite.setAll({ rotation: angle, x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateFill(fill?: Slice, position?: number, endPosition?: number) {\n\t\tif (fill) {\n\t\t\tif (position == null) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\t\t\tif (endPosition == null) {\n\t\t\t\tendPosition = 1;\n\t\t\t}\n\n\t\t\tlet startAngle = this.fitAngle(this.positionToAngle(position));\n\t\t\tlet endAngle = this.fitAngle(this.positionToAngle(endPosition));\n\t\t\tfill.setAll({ startAngle: startAngle, arc: endAngle - startAngle });\n\n\t\t\tfill._setSoft(\"innerRadius\", this.getPrivate(\"innerRadius\"));\n\t\t\tfill._setSoft(\"radius\", this.getPrivate(\"radius\"));\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic fitAngle(angle: number): number {\n\t\tconst startAngle = this.getPrivate(\"startAngle\", 0);\n\t\tconst endAngle = this.getPrivate(\"endAngle\", 0);\n\n\t\tconst minAngle = Math.min(startAngle, endAngle);\n\t\tconst maxAngle = Math.max(startAngle, endAngle);\n\n\t\tif (angle < minAngle) {\n\t\t\tangle = minAngle;\n\t\t}\n\n\t\tif (angle > maxAngle) {\n\t\t\tangle = maxAngle;\n\t\t}\n\n\t\treturn angle;\n\t}\n\n\t/**\n\t * Returns axis length in pixels.\n\t *\n\t * @return Length\n\t */\n\tpublic axisLength(): number {\n\t\treturn Math.abs(this.getPrivate(\"radius\", 0) * Math.PI * 2 * (this.getPrivate(\"endAngle\", 360) - this.getPrivate(\"startAngle\", 0)) / 360);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic positionTooltip(tooltip: Tooltip, position: number) {\n\t\tlet radius = this.getPrivate(\"radius\", 0);\n\t\tconst angle = this.positionToAngle(position);\n\t\t//return tooltip.set(\"pointTo\", this.axis._display.toGlobal({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }));\n\t\tthis._positionTooltip(tooltip, { x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateTooltipBounds(_tooltip: Tooltip) {\n\n\t}\n}\n","import type { RadarChart } from \"./RadarChart\";\nimport type { Grid } from \"../xy/axes/Grid\";\nimport type { IPoint } from \"../../core/util/IPoint\";\nimport type { Graphics } from \"../../core/render/Graphics\";\nimport type { AxisTick } from \"../xy/axes/AxisTick\";\nimport type { AxisBullet } from \"../xy/axes/AxisBullet\";\nimport type { Tooltip } from \"../../core/render/Tooltip\";\n\nimport { AxisRenderer, IAxisRendererSettings, IAxisRendererPrivate } from \"../xy/axes/AxisRenderer\";\nimport { Percent, p100 } from \"../../core/util/Percent\";\nimport { AxisLabelRadial } from \"../xy/axes/AxisLabelRadial\";\nimport { arc } from \"d3-shape\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { Template } from \"../../core/util/Template\";\n\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $type from \"../../core/util/Type\";\nimport * as $math from \"../../core/util/Math\";\n\n\nexport interface IAxisRendererRadialSettings extends IAxisRendererSettings {\n\n\t/**\n\t * Outer radius of the axis.\n\t *\n\t * If set in percent, it will be relative to chart's own `radius`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/radar-axes/#Axis_radii_and_angles} for more info\n\t */\n\tradius?: number | Percent;\n\n\t/**\n\t * Inner radius of the axis.\n\t *\n\t * If set in percent, it will be relative to chart's own `innerRadius`.\n\t *\n\t * If value is negative, inner radius will be calculated from the outer edge.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/radar-axes/#Axis_radii_and_angles} for more info\n\t */\n\tinnerRadius?: number | Percent;\n\n\t/**\n\t * Series start angle.\n\t *\n\t * If not set, will use chart's `startAngle.`\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/radar-axes/#Axis_radii_and_angles} for more info\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * Series end angle.\n\t *\n\t * If not set, will use chart's `endAngle.`\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/radar-axes/#Axis_radii_and_angles} for more info\n\t */\n\tendAngle?: number;\n\n\n\t/**\n\t * @todo am: needs description\n\t */\n\taxisAngle?: number;\n\n}\n\nexport interface IAxisRendererRadialPrivate extends IAxisRendererPrivate {\n\n\t/**\n\t * Actual radius of the label in pixels.\n\t */\n\tradius?: number;\n\n\t/**\n\t * Actual inner radius of the label in pixels.\n\t */\n\tinnerRadius?: number;\n\n\t/**\n\t * Actual start angle of the label in degrees.\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * Actual end angle of the label in degrees.\n\t */\n\tendAngle?: number;\n\n}\n\n/**\n * Renderer for radial axes.\n */\nexport class AxisRendererRadial extends AxisRenderer {\n\n\t/**\n\t * Chart this renderer is for.\n\t */\n\tdeclare public chart: RadarChart | undefined;\n\n\tpublic static className: string = \"AxisRendererRadial\";\n\tpublic static classNames: Array<string> = AxisRenderer.classNames.concat([AxisRendererRadial.className]);\n\n\tdeclare public _settings: IAxisRendererRadialSettings;\n\tdeclare public _privateSettings: IAxisRendererRadialPrivate;\n\n\tprotected _fillGenerator = arc();\n\n\t/**\n\t * A [[TemplateList]] with all the labels attached to the axis.\n\t *\n\t * `labels.template` can be used to configure appearance of the labels.\n\t *\n\t * @default new ListTemplate<AxisLabelRadial>\n\t */\n\tpublic readonly labels: ListTemplate<AxisLabelRadial> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => AxisLabelRadial._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.labels.template.get(\"themeTags\", []), this.get(\"themeTags\", []))\n\t\t}, [this.labels.template])\n\t);\n\n\tpublic _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"renderer\", \"radial\"]);\n\t\tsuper._afterNew();\n\t\tthis.setPrivate(\"letter\", \"Y\");\n\t\tthis.setRaw(\"position\", \"absolute\");\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this.isDirty(\"radius\") || this.isDirty(\"innerRadius\") || this.isDirty(\"startAngle\") || this.isDirty(\"endAngle\")) {\n\t\t\tthis.updateLayout();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic processAxis() {\n\t\tsuper.processAxis();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLayout() {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tconst radius = chart.getPrivate(\"radius\", 0);\n\n\t\t\tlet r = $utils.relativeToValue(this.get(\"radius\", p100), radius);\n\t\t\tlet ir = $utils.relativeToValue(this.get(\"innerRadius\", chart.getPrivate(\"innerRadius\", 0)), radius) * chart.getPrivate(\"irModifyer\", 1);\n\n\t\t\tif (ir < 0) {\n\t\t\t\tir = r + ir;\n\t\t\t}\n\n\t\t\tthis.setPrivate(\"radius\", r);\n\t\t\tthis.setPrivate(\"innerRadius\", ir);\n\t\t\tlet startAngle = this.get(\"startAngle\", chart.get(\"startAngle\", -90));\n\t\t\tlet endAngle = this.get(\"endAngle\", chart.get(\"endAngle\", 270));\n\n\t\t\tthis.setPrivate(\"startAngle\", startAngle);\n\t\t\tthis.setPrivate(\"endAngle\", endAngle);\n\n\t\t\tconst axisAngle = this.get(\"axisAngle\", 0);\n\n\t\t\tthis.set(\"draw\", (display) => {\n\t\t\t\tdisplay.moveTo(ir * $math.cos(axisAngle), ir * $math.sin(axisAngle));\n\t\t\t\tdisplay.lineTo(r * $math.cos(axisAngle), r * $math.sin(axisAngle));\n\t\t\t});\n\n\t\t\tthis.axis.markDirtySize();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateGrid(grid?: Grid, position?: number, endPosition?: number) {\n\t\tif (grid) {\n\n\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = grid.get(\"location\", 0.5);\n\t\t\tif ($type.isNumber(endPosition) && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tlet radius = this.positionToCoordinate(position) + this.getPrivate(\"innerRadius\", 0);\n\n\t\t\tthis.toggleVisibility(grid, position, 0, 1);\n\n\t\t\tif ($type.isNumber(radius)) {\n\t\t\t\tgrid.set(\"draw\", (display) => {\n\t\t\t\t\tlet startAngle = this.getPrivate(\"startAngle\", 0) * $math.RADIANS;\n\t\t\t\t\tlet endAngle = this.getPrivate(\"endAngle\", 0) * $math.RADIANS;\n\t\t\t\t\tdisplay.arc(0, 0, Math.max(0, radius), Math.min(startAngle, endAngle), Math.max(startAngle, endAngle));\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\n\t// do not delete\n\tprotected _handleOpposite() { }\n\n\t/**\n\t * Converts relative position to X/Y point.\n\t *\n\t * @param   position  Position\n\t * @return            Point\n\t */\n\tpublic positionToPoint(position: number): IPoint {\n\t\tconst innerRadius = this.getPrivate(\"innerRadius\", 0);\n\t\tconst radius = this.positionToCoordinate(position) + innerRadius;\n\t\tconst axisAngle = this.get(\"axisAngle\", 0);\n\t\treturn { x: radius * $math.cos(axisAngle), y: radius * $math.sin(axisAngle) };\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLabel(label?: AxisLabelRadial, position?: number, endPosition?: number, count?: number) {\n\t\tif (label) {\n\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = 0.5;\n\t\t\tif ($type.isNumber(count) && count > 1) {\n\t\t\t\tlocation = label.get(\"multiLocation\", location);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlocation = label.get(\"location\", location);\n\t\t\t}\n\n\t\t\tif ($type.isNumber(endPosition) && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tconst point = this.positionToPoint(position);\n\n\t\t\tlet radius = Math.hypot(point.x, point.y);\n\n\t\t\tlabel.setPrivate(\"radius\", radius);\n\t\t\tlabel.setPrivate(\"innerRadius\", radius);\n\t\t\tlabel.set(\"labelAngle\", this.get(\"axisAngle\"));\n\n\t\t\tthis.toggleVisibility(label, position, label.get(\"minPosition\", 0), label.get(\"maxPosition\", 1));\n\t\t}\n\t}\n\n\tprotected fillDrawMethod(fill: Graphics, y0: number, y1: number) {\n\t\tfill.set(\"draw\", (display) => {\n\t\t\ty0 = Math.max(0, y0);\n\t\t\ty1 = Math.max(0, y1);\n\t\t\tthis._fillGenerator.context(display as any);\n\t\t\tlet startAngle = (this.getPrivate(\"startAngle\", 0) + 90) * $math.RADIANS;\n\t\t\tlet endAngle = (this.getPrivate(\"endAngle\", 0) + 90) * $math.RADIANS;\n\n\t\t\tif (endAngle < startAngle) {\n\t\t\t\t[startAngle, endAngle] = [endAngle, startAngle];\n\t\t\t}\n\n\t\t\tthis._fillGenerator({ innerRadius: y0, outerRadius: y1, startAngle: startAngle, endAngle: endAngle });\n\t\t})\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateTick(tick?: AxisTick, position?: number, endPosition?: number, count?: number) {\n\t\tif (tick) {\n\n\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = 0.5;\n\t\t\tif ($type.isNumber(count) && count > 1) {\n\t\t\t\tlocation = tick.get(\"multiLocation\", location);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlocation = tick.get(\"location\", location);\n\t\t\t}\n\n\t\t\tif ($type.isNumber(endPosition) && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tconst point = this.positionToPoint(position);\n\n\t\t\ttick.set(\"x\", point.x);\n\t\t\ttick.set(\"y\", point.y);\n\n\t\t\tlet length = tick.get(\"length\", 0);\n\t\t\tconst inside = tick.get(\"inside\");\n\n\t\t\tif (inside) {\n\t\t\t\tlength *= -1\n\t\t\t}\n\n\t\t\tconst axisAngle = this.get(\"axisAngle\", 0) + 90;\n\n\t\t\ttick.set(\"draw\", (display) => {\n\t\t\t\tdisplay.moveTo(0, 0);\n\t\t\t\tdisplay.lineTo(length * $math.cos(axisAngle), length * $math.sin(axisAngle));\n\t\t\t})\n\n\t\t\tthis.toggleVisibility(tick, position, tick.get(\"minPosition\", 0), tick.get(\"maxPosition\", 1));\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateBullet(bullet?: AxisBullet, position?: number, endPosition?: number) {\n\t\tif (bullet) {\n\n\t\t\tconst sprite = bullet.get(\"sprite\");\n\n\t\t\tif (sprite) {\n\n\t\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\t\tposition = 0;\n\t\t\t\t}\n\n\t\t\t\tlet location = bullet.get(\"location\", 0.5);\n\t\t\t\tif ($type.isNumber(endPosition) && endPosition != position) {\n\t\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t\t}\n\n\t\t\t\tconst point = this.positionToPoint(position);\n\n\t\t\t\tsprite.setAll({ x: point.x, y: point.y });\n\n\t\t\t\tthis.toggleVisibility(sprite, position, 0, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateFill(fill?: Graphics, position?: number, endPosition?: number) {\n\t\tif (fill) {\n\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\t\t\tif (!$type.isNumber(endPosition)) {\n\t\t\t\tendPosition = 1;\n\t\t\t}\n\n\t\t\tconst innerRadius = this.getPrivate(\"innerRadius\", 0);\n\n\t\t\tlet y0 = this.positionToCoordinate(position) + innerRadius;\n\t\t\tlet y1 = this.positionToCoordinate(endPosition) + innerRadius;\n\n\t\t\tthis.fillDrawMethod(fill, y0, y1);\n\t\t}\n\t}\n\n\t/**\n\t * Returns axis length in pixels.\n\t *\n\t * @return Length\n\t */\n\tpublic axisLength(): number {\n\t\treturn this.getPrivate(\"radius\", 0) - this.getPrivate(\"innerRadius\", 0);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateTooltipBounds(_tooltip: Tooltip) {\n\n\t}\n\n\t/**\n\t * Converts relative position to pixels.\n\t *\n\t * @param   position  Position\n\t * @return            Pixels\n\t */\n\tpublic positionToCoordinate(position: number): number {\n\t\tif (this._inversed) {\n\t\t\tposition = Math.min(this._end, position);\n\t\t\treturn (this._end - position) * this._axisLength;\n\t\t}\n\t\telse {\n\t\t\tposition = Math.max(this._start, position);\n\t\t\treturn (position - this._start) * this._axisLength;\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic positionTooltip(tooltip: Tooltip, position: number) {\n\t\tlet radius = this.getPrivate(\"innerRadius\", 0) + this.positionToCoordinate(position);\n\t\tconst angle = this.get(\"axisAngle\", 0);\n\t\t//return tooltip.set(\"pointTo\", this.axis._display.toGlobal({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }));\n\t\tthis._positionTooltip(tooltip, { x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\n\t}\n}\n","import type { Axis } from \"../xy/axes/Axis\";\nimport type { AxisRendererCircular } from \"../radar/AxisRendererCircular\";\nimport type { RadarChart } from \"../radar/RadarChart\";\n\nimport { Container, IContainerPrivate, IContainerSettings } from \"../../core/render/Container\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport { Percent, percent } from \"../../core/util/Percent\";\n\nimport * as $utils from \"../../core/util/Utils\";\n\n\nexport interface IClockHandSettings extends IContainerSettings {\n\n\t/**\n\t * A width of the tip of the clock hand, in pixels.\n\t *\n\t * @default 1\n\t */\n\ttopWidth?: number;\n\n\t/**\n\t * A width of the base of the clock hand, in pixels.\n\t *\n\t * @default 10\n\t */\n\tbottomWidth?: number;\n\n\t/**\n\t * Radius of the hand, in pixels, or percent (relative to the axis radius).\n\t *\n\t * If set to negative number, will mean number of pixels inwards from the\n\t * axis.\n\t *\n\t * @default 90%\n\t */\n\tradius?: number | Percent;\n\n\t/**\n\t * Inner radius of the hand, in pixels, or percent (relative to the axis\n\t * radius).\n\t *\n\t * If set to negative number, will mean number of pixels inwards from the\n\t * axis.\n\t *\n\t * @default 0\n\t */\n\tinnerRadius?: number | Percent;\n\n\t/**\n\t * Radius of the hand pin (circle at the base of the hand), in pixels, or in\n\t * percent (relative to the axis radius.)\n\t *\n\t * @default 10\n\t */\n\tpinRadius?: number | Percent;\n\n}\n\nexport interface IClockHandPrivate extends IContainerPrivate {\n}\n\n/**\n * A clock hand for use with [[RadarChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/gauge-charts/#Clock_hands} for more info\n * @important\n */\nexport class ClockHand extends Container {\n\n\tdeclare public _settings: IClockHandSettings;\n\tdeclare public _privateSettings: IClockHandPrivate;\n\n\tpublic static className: string = \"ClockHand\";\n\tpublic static classNames: Array<string> = Container.classNames.concat([ClockHand.className]);\n\n\t/**\n\t * A \"hand\" element.\n\t *\n\t * @default Graphics.new()\n\t */\n\tpublic readonly hand: Graphics = this.children.push(Graphics.new(this._root, { themeTags: [\"hand\"] }));\n\n\t/**\n\t * A \"pin\" element (hand's base).\n\t *\n\t * @default Graphics.new()\n\t */\n\tpublic readonly pin: Graphics = this.children.push(Graphics.new(this._root, { themeTags: [\"pin\"] }));\n\n\tprotected _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"clock\"]);\n\n\t\tsuper._afterNew();\n\n\t\t// to be redrawn when size changes\n\t\tthis.set(\"width\", percent(1));\n\n\t\tthis.adapters.add(\"x\", () => {\n\t\t\treturn 0\n\t\t})\n\n\t\tthis.adapters.add(\"y\", () => {\n\t\t\treturn 0\n\t\t})\n\n\t\tthis.pin.set(\"draw\", (display, graphics: Graphics) => {\n\t\t\tconst parent = graphics.parent as ClockHand;\n\t\t\tif (parent) {\n\t\t\t\tconst dataItem = parent.dataItem;\n\t\t\t\tif (dataItem) {\n\t\t\t\t\tconst axis = dataItem.component as Axis<AxisRendererCircular>;\n\t\t\t\t\tif (axis) {\n\t\t\t\t\t\tconst chart = axis.chart as RadarChart;\n\t\t\t\t\t\tif (chart) {\n\t\t\t\t\t\t\tconst cr = chart.getPrivate(\"radius\", 0);\n\t\t\t\t\t\t\tlet r = $utils.relativeToValue(parent.get(\"pinRadius\", 0), cr);\n\t\t\t\t\t\t\tif(r < 0){\n\t\t\t\t\t\t\t\tr = cr + r;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdisplay.moveTo(r, 0)\n\t\t\t\t\t\t\tdisplay.arc(0, 0, r, 0, 360);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tthis.hand.set(\"draw\", (display, graphics: Graphics) => {\n\t\t\tconst parent = graphics.parent as ClockHand;\n\n\t\t\tif (parent) {\n\n\t\t\t\tlet bullet = parent.parent;\n\t\t\t\t// to be redrawn when size changes\n\t\t\t\tif (bullet) {\n\t\t\t\t\tbullet.set(\"width\", percent(1));\n\t\t\t\t}\n\n\t\t\t\tconst dataItem = parent.dataItem;\n\n\t\t\t\tif (dataItem) {\n\t\t\t\t\tconst axis = dataItem.component as Axis<AxisRendererCircular>;\n\t\t\t\t\tif (axis) {\n\t\t\t\t\t\tconst chart = axis.chart as RadarChart;\n\t\t\t\t\t\tif (chart) {\n\t\t\t\t\t\t\tconst bw = parent.get(\"bottomWidth\", 10) / 2;\n\t\t\t\t\t\t\tconst tw = parent.get(\"topWidth\", 0) / 2;\n\t\t\t\t\t\t\tconst cr = chart.getPrivate(\"radius\", 0);\n\t\t\t\t\t\t\tlet r = $utils.relativeToValue(parent.get(\"radius\", 0), cr);\n\n\t\t\t\t\t\t\tif(r < 0){\n\t\t\t\t\t\t\t\tr = cr + r;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlet ir = parent.get(\"innerRadius\", 0);\n\n\t\t\t\t\t\t\tif (ir instanceof Percent) {\n\t\t\t\t\t\t\t\tir = $utils.relativeToValue(ir, cr);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tif (ir < 0) {\n\t\t\t\t\t\t\t\t\tif (ir < 0) {\n\t\t\t\t\t\t\t\t\t\tir = r + ir;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tdisplay.moveTo(ir, -bw);\n\t\t\t\t\t\t\tdisplay.lineTo(r, -tw);\n\t\t\t\t\t\t\tdisplay.lineTo(r, tw);\n\t\t\t\t\t\t\tdisplay.lineTo(ir, bw);\n\t\t\t\t\t\t\tdisplay.lineTo(ir, -bw);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\t\tthis.hand._markDirtyKey(\"fill\");\n\t\tthis.pin._markDirtyKey(\"fill\");\n\t}\n}\n","import { Theme } from \"../../core/Theme\";\r\nimport { percent } from \"../../core/util/Percent\";\r\nimport { setColor } from \"../../themes/DefaultTheme\";\r\n\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport class RadarDefaultTheme extends Theme {\r\n\tprotected setupDefaultRules() {\r\n\t\tsuper.setupDefaultRules();\r\n\r\n\t\tconst r = this.rule.bind(this);\r\n\r\n\t\tconst ic = this._root.interfaceColors;\r\n\r\n\r\n\t\t/**\r\n\t\t * ========================================================================\r\n\t\t * charts/radar\r\n\t\t * ========================================================================\r\n\t\t */\r\n\r\n\t\tr(\"RadarChart\").setAll({\r\n\t\t\tradius: percent(80),\r\n\t\t\tinnerRadius: 0,\r\n\t\t\tstartAngle: -90,\r\n\t\t\tendAngle: 270\r\n\t\t});\r\n\r\n\t\tr(\"RadarColumnSeries\").setAll({\r\n\t\t\tclustered: true\r\n\t\t});\r\n\r\n\t\tr(\"Slice\", [\"radar\", \"column\", \"series\"]).setAll({\r\n\t\t\twidth: percent(80),\r\n\t\t\theight: percent(80)\r\n\t\t});\r\n\r\n\t\tr(\"RadarLineSeries\").setAll({\r\n\t\t\tconnectEnds: true\r\n\t\t});\r\n\r\n\t\tr(\"SmoothedRadarLineSeries\").setAll({\r\n\t\t\ttension: 0.5\r\n\t\t});\r\n\r\n\t\tr(\"AxisRendererRadial\").setAll({\r\n\t\t\tminGridDistance: 40,\r\n\t\t\taxisAngle: -90,\r\n\t\t\tinversed: false,\r\n\t\t\tcellStartLocation: 0,\r\n\t\t\tcellEndLocation: 1\r\n\t\t});\r\n\r\n\t\tr(\"AxisRendererCircular\").setAll({\r\n\t\t\tminGridDistance: 100,\r\n\t\t\tinversed: false,\r\n\t\t\tcellStartLocation: 0,\r\n\t\t\tcellEndLocation: 1\r\n\t\t});\r\n\r\n\t\tr(\"RadialLabel\", [\"circular\"]).setAll({\r\n\t\t\ttextType: \"circular\",\r\n\t\t\tpaddingTop: 1,\r\n\t\t\tpaddingRight: 0,\r\n\t\t\tpaddingBottom: 1,\r\n\t\t\tpaddingLeft: 0,\r\n\t\t\tcenterX: 0,\r\n\t\t\tcenterY: 0,\r\n\t\t\tradius: 8\r\n\t\t});\r\n\r\n\r\n\t\tr(\"AxisLabelRadial\", [\"category\"]).setAll({\r\n\t\t\ttext:\"{category}\",\r\n\t\t\tpopulateText:true\r\n\t\t});\t\t\t\r\n\r\n\t\tr(\"RadialLabel\", [\"radial\"]).setAll({\r\n\t\t\ttextType: \"regular\",\r\n\t\t\tcenterX: 0,\r\n\t\t\ttextAlign: \"right\"\r\n\t\t});\r\n\r\n\t\tr(\"RadarChart\", [\"gauge\"]).setAll({\r\n\t\t\tstartAngle: 180,\r\n\t\t\tendAngle: 360,\r\n\t\t\tinnerRadius: percent(90)\r\n\t\t});\r\n\r\n\t\tr(\"ClockHand\").setAll({\r\n\t\t\ttopWidth: 1,\r\n\t\t\tbottomWidth: 10,\r\n\t\t\tradius: percent(90),\r\n\t\t\tpinRadius: 10\r\n\t\t});\r\n\r\n\t\t{\r\n\t\t\tconst rule = r(\"Graphics\", [\"clock\", \"hand\"]);\r\n\r\n\t\t\trule.setAll({\r\n\t\t\t\tfillOpacity: 1\r\n\t\t\t});\r\n\r\n\t\t\tsetColor(rule, \"fill\", ic, \"alternativeBackground\");\r\n\t\t}\r\n\r\n\t\t{\r\n\t\t\tconst rule = r(\"Graphics\", [\"clock\", \"pin\"]);\r\n\r\n\t\t\trule.setAll({\r\n\t\t\t\tfillOpacity: 1\r\n\t\t\t});\r\n\r\n\t\t\tsetColor(rule, \"fill\", ic, \"alternativeBackground\");\r\n\t\t}\r\n\r\n\t}\r\n}\r\n","import type { AxisRendererCircular } from \"./AxisRendererCircular\";\nimport type { AxisRendererRadial } from \"./AxisRendererRadial\";\nimport type { Axis } from \"../xy/axes/Axis\";\nimport type { XYSeries } from \"../xy/series/XYSeries\";\nimport type { RadarCursor } from \"./RadarCursor\";\nimport type { RadarColumnSeries } from \"./RadarColumnSeries\";\nimport type { RadarLineSeries } from \"./RadarLineSeries\";\nimport type { IPoint } from \"../../core/util/IPoint\";\n\nimport { RadarDefaultTheme } from \"./RadarDefaultTheme\";\nimport { XYChart, IXYChartPrivate, IXYChartSettings } from \"../xy/XYChart\";\nimport { Percent, p50, percent } from \"../../core/util/Percent\";\nimport { Container } from \"../../core/render/Container\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport { arc } from \"d3-shape\";\n\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $math from \"../../core/util/Math\";\n\nexport interface IRadarChartSettings extends IXYChartSettings {\n\n\t/**\n\t * Outer radius of the chart. Can be set in pixels or percent, relative to\n\t * available space.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/#Chart_radius} for more info\n\t * @default 80%\n\t */\n\tradius?: number | Percent;\n\n\t/**\n\t * Inner radius of the chart. Can be set in pixels or percent, relative to\n\t * outer radius.\n\t *\n\t * Setting to negative number will mean pixels from outer radius.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/#Chart_radius} for more info\n\t */\n\tinnerRadius?: number | Percent;\n\n\t/**\n\t * Chart start angle in degress.\n\t *\n\t * @default -90\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/#Start_end_angles} for more info\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * Chart end angle in degress.\n\t *\n\t * @default 270\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/#Start_end_angles} for more info\n\t */\n\tendAngle?: number;\n\n\t/**\n\t * [[RadarCursor]] instance.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/#Cursor} for more info\n\t */\n\tcursor?: RadarCursor;\n\n}\n\nexport interface IRadarChartPrivate extends IXYChartPrivate {\n\n\t/**\n\t * Radius in pixels.\n\t */\n\tradius?: number;\n\n\t/**\n\t * Inner radius in pixels.\n\t */\n\tinnerRadius?: number;\n\n\t/**\n\t * @ignore\n\t */\n\tirModifyer?: number;\n\n}\n\n/**\n * Radar chart.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/} for more info\n * @important\n */\nexport class RadarChart extends XYChart {\n\n\t/**\n\t * [[Container]] where radar-related elements go.\n\t *\n\t * @default Container.new()\n\t */\n\tpublic readonly radarContainer = this.plotContainer.children.push(Container.new(this._root, { x: p50, y: p50 }));\n\n\tpublic static className: string = \"RadarChart\";\n\tpublic static classNames: Array<string> = XYChart.classNames.concat([RadarChart.className]);\n\n\tdeclare public _settings: IRadarChartSettings;\n\tdeclare public _privateSettings: IRadarChartPrivate;\n\n\tprotected _arcGenerator = arc();\n\tdeclare public _seriesType: RadarColumnSeries | RadarLineSeries;\n\n\tprotected _maxRadius: number = 1;\n\n\tprotected _afterNew() {\n\t\tthis._defaultThemes.push(RadarDefaultTheme.new(this._root));\n\n\t\tsuper._afterNew();\n\n\t\tconst radarContainer = this.radarContainer;\n\t\tconst gridContainer = this.gridContainer;\n\t\tconst topGridContainer = this.topGridContainer;\n\t\tconst seriesContainer = this.seriesContainer;\n\t\tconst bulletsContainer = this.bulletsContainer;\n\n\t\tradarContainer.children.pushAll([gridContainer, seriesContainer, topGridContainer, bulletsContainer]);\n\n\t\tseriesContainer.set(\"mask\", Graphics.new(this._root, {}));\n\t\tgridContainer.set(\"mask\", Graphics.new(this._root, {}));\n\n\t\tthis._disposers.push(this.plotContainer.events.on(\"boundschanged\", () => {\n\t\t\tthis._updateRadius();\n\t\t}));\n\t}\n\n\tprotected _maskGrid(){\n\t\t\n\t}\n\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tif (this._sizeDirty || this.isDirty(\"radius\") || this.isDirty(\"innerRadius\") || this.isDirty(\"startAngle\") || this.isDirty(\"endAngle\")) {\n\n\t\t\tconst chartContainer = this.chartContainer;\n\t\t\tconst w = chartContainer.innerWidth();\n\t\t\tconst h = chartContainer.innerHeight();\n\n\t\t\tconst startAngle = this.get(\"startAngle\", 0);\n\t\t\tconst endAngle = this.get(\"endAngle\", 0);\n\t\t\tconst innerRadius = this.get(\"innerRadius\");\n\n\n\t\t\tlet bounds = $math.getArcBounds(0, 0, startAngle, endAngle, 1);\n\n\t\t\tconst wr = w / (bounds.right - bounds.left);\n\t\t\tconst hr = h / (bounds.bottom - bounds.top);\n\n\t\t\tlet innerBounds = { left: 0, right: 0, top: 0, bottom: 0 };\n\n\t\t\tif (innerRadius instanceof Percent) {\n\t\t\t\tlet value = innerRadius.value;\n\t\t\t\tlet mr = Math.min(wr, hr);\n\t\t\t\tvalue = Math.max(mr * value, mr - Math.min(h, w)) / mr;\n\t\t\t\tinnerBounds = $math.getArcBounds(0, 0, startAngle, endAngle, value);\n\t\t\t\tthis.setPrivateRaw(\"irModifyer\", value / innerRadius.value);\n\t\t\t}\n\n\t\t\tbounds = $math.mergeBounds([bounds, innerBounds]);\n\n\t\t\tthis._maxRadius = Math.max(0, Math.min(wr, hr));\n\n\t\t\tconst radius = $utils.relativeToValue(this.get(\"radius\", 0), this._maxRadius);\n\t\t\tthis.radarContainer.setAll({\n\t\t\t\tdy: -radius * (bounds.bottom + bounds.top) / 2, dx: -radius * (bounds.right + bounds.left) / 2\n\t\t\t})\n\n\t\t\tthis._updateRadius();\n\t\t}\n\t}\n\n\tprotected _addCursor(cursor: RadarCursor) {\n\t\tthis.radarContainer.children.push(cursor);\n\t}\n\n\n\t// do not delete\n\tpublic _updateRadius() {\n\t\tconst radius = $utils.relativeToValue(this.get(\"radius\", percent(80)), this._maxRadius);\n\t\tthis.setPrivateRaw(\"radius\", radius);\n\n\t\tlet innerRadius = $utils.relativeToValue(this.get(\"innerRadius\", 0), radius);\n\n\t\tif (innerRadius < 0) {\n\t\t\tinnerRadius = radius + innerRadius;\n\t\t}\n\n\t\tthis.setPrivateRaw(\"innerRadius\", innerRadius);\n\n\t\tthis.xAxes.each((axis) => {\n\t\t\tconst renderer = axis.get(\"renderer\") as AxisRendererCircular;\n\t\t\trenderer.updateLayout();\n\t\t})\n\n\t\tthis.yAxes.each((axis) => {\n\t\t\tconst renderer = axis.get(\"renderer\") as AxisRendererRadial;\n\t\t\trenderer.updateLayout();\n\t\t})\n\n\t\tthis._updateMask(this.seriesContainer, innerRadius, radius);\n\t\tthis._updateMask(this.gridContainer, innerRadius, radius);\n\n\t\tthis.series.each((series) => {\n\t\t\tif ((series as XYSeries).get(\"maskBullets\")) {\n\t\t\t\tthis._updateMask(series.bulletsContainer, innerRadius, radius);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tseries.bulletsContainer.remove(\"mask\");\n\t\t\t}\n\t\t})\n\n\t\tconst cursor = this.get(\"cursor\");\n\t\tif (cursor) {\n\t\t\tcursor.updateLayout();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic _updateMask(container: Container, innerRadius: number, radius: number) {\n\t\tconst mask = container.get(\"mask\");\n\t\tif (mask) {\n\t\t\tmask.set(\"draw\", (display) => {\n\t\t\t\tthis._arcGenerator.context(display as any);\n\t\t\t\tthis._arcGenerator({ innerRadius: innerRadius, outerRadius: radius + .5, startAngle: (this.get(\"startAngle\", 0) + 90) * $math.RADIANS, endAngle: (this.get(\"endAngle\", 0) + 90) * $math.RADIANS });\n\t\t\t})\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic processAxis(axis: Axis<AxisRendererRadial | AxisRendererCircular>) {\n\t\tthis.radarContainer.children.push(axis);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic inPlot(point: IPoint, radius?: number, innerRadius?: number): boolean {\n\t\tconst r = Math.hypot(point.x, point.y);\n\t\tconst angle = $math.normalizeAngle(Math.atan2(point.y, point.x) * $math.DEGREES);\n\n\t\tlet startAngle = $math.normalizeAngle(this.get(\"startAngle\", 0));\n\t\tlet endAngle = $math.normalizeAngle(this.get(\"endAngle\", 0));\n\n\t\tlet inArc = false;\n\t\tif (startAngle < endAngle) {\n\t\t\tif (startAngle < angle && angle < endAngle) {\n\t\t\t\tinArc = true;\n\t\t\t}\n\t\t}\n\n\t\tif (startAngle > endAngle) {\n\t\t\tif (angle > startAngle) {\n\t\t\t\tinArc = true;\n\t\t\t}\n\t\t\tif (angle < endAngle) {\n\t\t\t\tinArc = true;\n\t\t\t}\n\t\t}\n\n\t\tif (startAngle == endAngle) {\n\t\t\tinArc = true;\n\t\t}\n\n\t\tif (!inArc) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (radius == null) {\n\t\t\tradius = this.getPrivate(\"radius\", 0);\n\t\t}\n\n\t\tif (innerRadius == null) {\n\t\t\tinnerRadius = this.getPrivate(\"innerRadius\", 0);\n\t\t}\n\n\t\tif (innerRadius > radius) {\n\t\t\t[innerRadius, radius] = [radius, innerRadius];\n\t\t}\n\n\t\tif (r <= radius + .5 && r >= innerRadius - .5) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprotected _tooltipToLocal(point: IPoint): IPoint {\n\t\treturn this.radarContainer._display.toLocal(point);\n\t}\n\n\tprotected _handlePinch(){\n\t\t\n\t}\n}\n","import type { DataItem } from \"../../core/render/Component\";\nimport type { IPoint } from \"../../core/util/IPoint\";\nimport type { AxisRendererCircular } from \"./AxisRendererCircular\";\nimport type { AxisRendererRadial } from \"./AxisRendererRadial\";\nimport type { Bullet } from \"../../core/render/Bullet\";\nimport type { RadarChart } from \"./RadarChart\";\n\nimport { BaseColumnSeries, IBaseColumnSeriesPrivate, IBaseColumnSeriesSettings, IBaseColumnSeriesDataItem, IBaseColumnSeriesAxisRange } from \"../xy/series/BaseColumnSeries\";\nimport { Slice } from \"../../core/render/Slice\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport { Template } from \"../../core/util/Template\";\nimport { ListTemplate } from \"../../core/util/List\";\n\nimport * as $math from \"../../core/util/Math\";\nimport * as $utils from \"../../core/util/Utils\";\n\n\nexport interface IRadarColumnSeriesDataItem extends IBaseColumnSeriesDataItem {\n\n\t/**\n\t * Actual radius of the column in pixels.\n\t */\n\tradius?: number;\n\n\t/**\n\t * Actual inner radius of the column in pixels.\n\t */\n\tinnerRadius?: number;\n\n\t/**\n\t * Actual start angle of the column in degrees.\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * Actual end angle of the column in degrees.\n\t */\n\tendAngle?: number;\n\n}\n\nexport interface IRadarColumnSeriesSettings extends IBaseColumnSeriesSettings {\n}\n\nexport interface IRadarColumnSeriesPrivate extends IBaseColumnSeriesPrivate {\n}\n\nexport interface IRadarColumnSeriesAxisRange extends IBaseColumnSeriesAxisRange {\n\n\t/**\n\t * List of columns in a range.\n\t */\n\tcolumns: ListTemplate<Slice>\n\n}\n\n/**\n * A column series for use in a [[RadarChart]].\n *\n * @important\n */\nexport class RadarColumnSeries extends BaseColumnSeries {\n\n\tdeclare public _settings: IRadarColumnSeriesSettings;\n\tdeclare public _privateSettings: IRadarColumnSeriesPrivate;\n\tdeclare public _dataItemSettings: IRadarColumnSeriesDataItem;\n\tdeclare public _axisRangeType: IRadarColumnSeriesAxisRange;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeColumn(dataItem: DataItem<this[\"_dataItemSettings\"]>, listTemplate: ListTemplate<Slice>): Slice {\n\t\tconst column = this.mainContainer.children.push(listTemplate.make());\n\t\tcolumn._setDataItem(dataItem);\n\t\tlistTemplate.push(column);\n\t\treturn column;\n\t}\n\n\t/**\n\t * A [[TemplateList]] of all columns in series.\n\t *\n\t * `columns.template` can be used to set default settings for all columns,\n\t * or to change on existing ones.\n\t *\n\t * @default new ListTemplate<Slice>\n\t */\n\tpublic readonly columns: ListTemplate<Slice> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => Slice._new(this._root, {\n\t\t\tposition: \"absolute\",\n\t\t\tthemeTags: $utils.mergeTags(this.columns.template.get(\"themeTags\", []), [\"radar\", \"series\", \"column\"])\n\t\t}, [this.columns.template])\n\t);\n\n\tpublic static className: string = \"RadarColumnSeries\";\n\tpublic static classNames: Array<string> = BaseColumnSeries.classNames.concat([RadarColumnSeries.className]);\n\n\t/**\n\t * A chart series belongs to.\n\t */\n\tdeclare public chart: RadarChart | undefined;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis.set(\"maskContent\", false);\n\t\tthis.bulletsContainer.set(\"maskContent\", false);\n\t\tthis.bulletsContainer.set(\"mask\", Graphics.new(this._root, {}));\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getPoint(positionX: number, positionY: number): IPoint {\n\n\t\tconst yAxis = this.get(\"yAxis\");\n\t\tconst xAxis = this.get(\"xAxis\");\n\n\t\tconst rendererY = xAxis.get(\"renderer\") as AxisRendererRadial;\n\n\t\tconst radius = yAxis.get(\"renderer\").positionToCoordinate(positionY) + rendererY.getPrivate(\"innerRadius\", 0);\n\n\t\tconst rendererX = xAxis.get(\"renderer\") as AxisRendererCircular;\n\t\tconst angle = rendererX.positionToAngle(positionX);\n\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\n\t}\n\n\tprotected _updateSeriesGraphics(dataItem: DataItem<this[\"_dataItemSettings\"]>, graphics: Graphics, l: number, r: number, t: number, b: number) {\n\n\t\tgraphics.setPrivate(\"visible\", true);\n\n\t\tconst xAxis = this.get(\"xAxis\");\n\t\tconst yAxis = this.get(\"yAxis\");\n\n\t\tconst rendererX = xAxis.get(\"renderer\") as AxisRendererCircular;\n\t\tconst rendererY = yAxis.get(\"renderer\") as AxisRendererRadial;\n\n\t\tconst axisInnerRadius = rendererY.getPrivate(\"innerRadius\", 0);\n\n\t\tconst startAngle = rendererX.fitAngle(rendererX.positionToAngle(l));\n\t\tconst endAngle = rendererX.fitAngle(rendererX.positionToAngle(r));\n\n\t\tlet innerRadius = rendererY.positionToCoordinate(b) + axisInnerRadius;\n\t\tlet radius = rendererY.positionToCoordinate(t) + axisInnerRadius;\n\n\t\tconst slice = graphics as Slice;\n\n\t\tdataItem.setRaw(\"startAngle\", startAngle);\n\t\tdataItem.setRaw(\"endAngle\", endAngle);\n\t\tdataItem.setRaw(\"innerRadius\", innerRadius);\n\t\tdataItem.setRaw(\"radius\", radius);\n\n\t\tlet axisStartAngle = 0;\n\t\tlet axisEndAngle = 360;\n\n\t\tif (yAxis == this.get(\"baseAxis\")) {\n\t\t\taxisStartAngle = rendererY.getPrivate(\"startAngle\", 0);\n\t\t\taxisEndAngle = rendererY.getPrivate(\"endAngle\", 360);\n\t\t}\n\t\telse {\n\t\t\taxisStartAngle = rendererX.getPrivate(\"startAngle\", 0);\n\t\t\taxisEndAngle = rendererX.getPrivate(\"endAngle\", 360);\n\t\t}\n\n\t\tif (axisStartAngle > axisEndAngle) {\n\t\t\t[axisStartAngle, axisEndAngle] = [axisEndAngle, axisStartAngle];\n\t\t}\n\n\t\tif ((endAngle <= axisStartAngle) || (startAngle >= axisEndAngle) || (radius <= axisInnerRadius && innerRadius <= axisInnerRadius)) {\n\t\t\tslice.setPrivate(\"visible\", false);\n\t\t}\n\n\t\tslice.setAll({ innerRadius, radius, startAngle, arc: endAngle - startAngle });\n\t}\n\n\tprotected _shouldInclude(position: number): boolean {\n\t\tconst xAxis = this.get(\"xAxis\");\n\t\tif (position < xAxis.get(\"start\") || position > xAxis.get(\"end\")) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprotected _shouldShowBullet(positionX: number, _positionY: number): boolean {\n\t\tconst xAxis = this.get(\"xAxis\");\n\t\tif (positionX < xAxis.get(\"start\") || positionX > xAxis.get(\"end\")) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this._showBullets;\n\t}\n\n\tpublic _positionBullet(bullet: Bullet) {\n\n\t\tlet sprite = bullet.get(\"sprite\");\n\t\tif (sprite) {\n\t\t\tconst dataItem = sprite.dataItem as any;\n\n\t\t\tconst locationX = bullet.get(\"locationX\", dataItem.get(\"locationX\", 0.5));\n\t\t\tconst locationY = bullet.get(\"locationY\", dataItem.get(\"locationY\", 0.5));\n\n\t\t\tconst series = dataItem.component;\n\n\t\t\tconst xAxis = series.get(\"xAxis\");\n\t\t\tconst yAxis = series.get(\"yAxis\");\n\n\t\t\tconst positionX = xAxis.getDataItemPositionX(dataItem, series._xField, locationX, series.get(\"vcx\", 1));\n\t\t\tconst positionY = yAxis.getDataItemPositionY(dataItem, series._yField, locationY, series.get(\"vcy\", 1));\n\n\t\t\tconst startAngle = dataItem.get(\"startAngle\", 0);\n\t\t\tconst endAngle = dataItem.get(\"endAngle\", 0);\n\n\t\t\tconst radius = dataItem.get(\"radius\", 0);\n\t\t\tconst innerRadius = dataItem.get(\"innerRadius\", 0);\n\n\t\t\tif (series._shouldShowBullet(positionX, positionY)) {\n\t\t\t\tsprite.setPrivate(\"visible\", true);\n\n\t\t\t\tconst angle = startAngle + (endAngle - startAngle) * locationX;\n\t\t\t\tconst r = innerRadius + (radius - innerRadius) * locationY;\n\n\t\t\t\tsprite.set(\"x\", $math.cos(angle) * r);\n\t\t\t\tsprite.set(\"y\", $math.sin(angle) * r);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsprite.setPrivate(\"visible\", false);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _handleMaskBullets() {\n\n\t}\n\n\tprotected _processAxisRange(axisRange: this[\"_axisRangeType\"]) {\n\t\tsuper._processAxisRange(axisRange);\n\t\taxisRange.columns = new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Slice._new(this._root, {\n\t\t\t\tposition: \"absolute\",\n\t\t\t\tthemeTags: $utils.mergeTags(axisRange.columns.template.get(\"themeTags\", []), [\"radar\", \"series\", \"column\"]),\n\t\t\t}, [this.columns.template, axisRange.columns.template])\n\t\t);\n\t}\n}\n","import type { IPoint } from \"../../core/util/IPoint\";\nimport type { RadarChart } from \"./RadarChart\"\nimport type { Percent } from \"../../core/util/Percent\";\nimport type { Tooltip } from \"../../core/render/Tooltip\";\n\nimport { XYCursor, IXYCursorSettings, IXYCursorPrivate, IXYCursorEvents } from \"../xy/XYCursor\";\nimport { p100 } from \"../../core/util/Percent\";\nimport { arc } from \"d3-shape\";\n\nimport * as $math from \"../../core/util/Math\";\nimport * as $utils from \"../../core/util/Utils\";\n\n\nexport interface IRadarCursorSettings extends IXYCursorSettings {\n\n\t/**\n\t * Cursor's inner radius.\n\t */\n\tinnerRadius?: number | Percent;\n\n\t/**\n\t * Cursor's inner radius.\n\t */\n\tradius?: number | Percent;\n\n\t//xAxis?: Axis<AxisRendererCircular>;\n\t//yAxis?: Axis<AxisRendererRadial>;\n\n\t/**\n\t * Cursor's position angle in degrees.\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * Cursor's selection end angle in degrees.\n\t */\n\tendAngle?: number;\n\n}\n\nexport interface IRadarCursorPrivate extends IXYCursorPrivate {\n\n\t/**\n\t * Actual radius of the cursor in pixels.\n\t */\n\tradius: number;\n\n\t/**\n\t * Actual inner radius of the cursor in pixels.\n\t */\n\tinnerRadius: number;\n\n\t/**\n\t * Actual start angle of the cursor in degrees.\n\t */\n\tstartAngle: number;\n\n\t/**\n\t * Actual end angle of the cursor in degrees.\n\t */\n\tendAngle: number;\n\n}\n\nexport interface IRadarCursorEvents extends IXYCursorEvents {\n}\n\n/**\n * Creates a cursor for a [[RadarChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/#Cursor} for more info\n */\nexport class RadarCursor extends XYCursor {\n\tpublic static className: string = \"RadarCursor\";\n\tpublic static classNames: Array<string> = XYCursor.classNames.concat([RadarCursor.className]);\n\n\tdeclare public _settings: IRadarCursorSettings;\n\tdeclare public _privateSettings: IRadarCursorPrivate;\n\tdeclare public _events: IRadarCursorEvents;\n\n\t/**\n\t * A chart cursor is attached to.\n\t */\n\tdeclare public chart: RadarChart | undefined;\n\n\tprotected _fillGenerator = arc();\n\n\tprotected _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"radar\", \"cursor\"]);\n\n\t\tsuper._afterNew();\n\t}\n\n\tprotected _handleXLine() {\n\n\t}\n\n\tprotected _handleYLine() {\n\n\t}\n\n\tprotected _getPosition(point: IPoint): IPoint {\n\t\tconst radius = Math.hypot(point.x, point.y);\n\t\tlet angle = $math.normalizeAngle(Math.atan2(point.y, point.x) * $math.DEGREES);\n\n\t\tconst innerRadius = this.getPrivate(\"innerRadius\");\n\n\t\tlet startAngle = $math.normalizeAngle(this.getPrivate(\"startAngle\"));\n\t\tlet endAngle = $math.normalizeAngle(this.getPrivate(\"endAngle\"));\n\n\t\tif (endAngle < startAngle || endAngle == startAngle) {\n\t\t\tif (angle < startAngle) {\n\t\t\t\tangle += 360\n\t\t\t}\n\n\t\t\tendAngle = endAngle + 360;\n\t\t}\n\n\t\tlet xPos = (angle - startAngle) / (endAngle - startAngle);\n\n\t\tif (xPos < 0) {\n\t\t\txPos = 1 + xPos;\n\t\t}\n\n\t\tif (xPos < 0.003) {\n\t\t\txPos = 0;\n\t\t}\n\n\t\tif (xPos > 0.997) {\n\t\t\txPos = 1;\n\t\t}\n\n\t\treturn { x: xPos, y: (radius - innerRadius) / (this.getPrivate(\"radius\") - innerRadius) };\n\t}\n\n\tprotected _getPoint(positionX: number, positionY: number): IPoint {\n\n\t\tconst innerRadius = this.getPrivate(\"innerRadius\");\n\t\tconst startAngle = this.getPrivate(\"startAngle\");\n\t\tconst endAngle = this.getPrivate(\"endAngle\");\n\t\tconst radius = this.getPrivate(\"radius\");\n\n\t\tconst angle = startAngle + positionX * (endAngle - startAngle);\n\t\tconst r = innerRadius + (radius - innerRadius) * positionY;\n\n\t\treturn { x: r * $math.cos(angle), y: r * $math.sin(angle) };\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLayout() {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tconst radius = chart.getPrivate(\"radius\", 0);\n\n\t\t\tthis.setPrivate(\"radius\", $utils.relativeToValue(this.get(\"radius\", p100), radius));\n\n\t\t\tlet innerRadius = $utils.relativeToValue(this.get(\"innerRadius\", chart.getPrivate(\"innerRadius\", 0)), radius);\n\t\t\tif (innerRadius < 0) {\n\t\t\t\tinnerRadius = radius + innerRadius;\n\t\t\t}\n\n\t\t\tthis.setPrivate(\"innerRadius\", innerRadius);\n\n\t\t\tlet startAngle = this.get(\"startAngle\", chart.get(\"startAngle\", -90));\n\t\t\tlet endAngle = this.get(\"endAngle\", chart.get(\"endAngle\", 270));\n\n\t\t\tthis.setPrivate(\"startAngle\", startAngle);\n\t\t\tthis.setPrivate(\"endAngle\", endAngle);\n\t\t}\n\t}\n\n\tprotected _updateLines(x: number, y: number) {\n\t\tif (!this._tooltipX) {\n\t\t\tthis._drawXLine(x, y);\n\t\t}\n\t\tif (!this._tooltipY) {\n\t\t\tthis._drawYLine(x, y);\n\t\t}\n\t}\n\n\tprotected _drawXLine(x: number, y: number) {\n\t\tconst innerRadius = this.getPrivate(\"innerRadius\");\n\t\tconst radius = this.getPrivate(\"radius\");\n\t\tconst angle = Math.atan2(y, x);\n\n\t\tthis.lineX.set(\"draw\", (display) => {\n\t\t\tdisplay.moveTo(innerRadius * Math.cos(angle), innerRadius * Math.sin(angle));\n\t\t\tdisplay.lineTo(radius * Math.cos(angle), radius * Math.sin(angle));\n\t\t})\n\t}\n\n\tprotected _drawYLine(x: number, y: number) {\n\t\tconst positionRadius = Math.hypot(x, y);\n\n\t\tthis.lineY.set(\"draw\", (display) => {\n\t\t\tdisplay.arc(0, 0, positionRadius, this.getPrivate(\"startAngle\", 0) * $math.RADIANS, this.getPrivate(\"endAngle\", 0) * $math.RADIANS);\n\t\t})\n\t}\n\n\tprotected _updateXLine(tooltip: Tooltip) {\n\t\tlet point = tooltip.get(\"pointTo\");\n\t\tif (point) {\n\t\t\tpoint = this._display.toLocal(point);\n\t\t\tthis._drawXLine(point.x, point.y);\n\t\t}\n\t}\n\n\tprotected _updateYLine(tooltip: Tooltip) {\n\t\tlet point = tooltip.get(\"pointTo\")\n\t\tif (point) {\n\t\t\tpoint = this._display.toLocal(point);\n\t\t\tthis._drawYLine(point.x, point.y);\n\t\t}\n\t}\n\n\tprotected _inPlot(point: IPoint): boolean {\n\t\tconst chart = this.chart;\n\n\t\tif (chart) {\n\t\t\treturn chart.inPlot(point, this.getPrivate(\"radius\"), this.getPrivate(\"innerRadius\"));\n\t\t}\n\t\treturn false;\n\t}\n\n\tprotected _updateSelection(point: IPoint) {\n\n\t\tthis.selection.set(\"draw\", (display) => {\n\t\t\tconst behavior = this.get(\"behavior\");\n\n\t\t\tconst downPoint = this._downPoint;\n\t\t\tconst cursorStartAngle = this.getPrivate(\"startAngle\");\n\t\t\tconst cursorEndAngle = this.getPrivate(\"endAngle\");\n\t\t\tlet cursorRadius = this.getPrivate(\"radius\");\n\t\t\tlet cursorInnerRadius = this.getPrivate(\"innerRadius\");\n\n\t\t\tif (cursorRadius < cursorInnerRadius) {\n\t\t\t\t[cursorRadius, cursorInnerRadius] = [cursorInnerRadius, cursorRadius];\n\t\t\t}\n\n\t\t\tlet startAngle = cursorStartAngle;\n\t\t\tlet endAngle = cursorEndAngle;\n\t\t\tlet radius = cursorRadius;\n\t\t\tlet innerRadius = cursorInnerRadius;\n\n\t\t\tif (downPoint) {\n\t\t\t\tif (behavior == \"zoomXY\" || behavior == \"selectXY\") {\n\t\t\t\t\tstartAngle = Math.atan2(downPoint.y, downPoint.x) * $math.DEGREES;\n\t\t\t\t\tendAngle = Math.atan2(point.y, point.x) * $math.DEGREES;\n\t\t\t\t\tinnerRadius = Math.hypot(downPoint.x, downPoint.y);\n\t\t\t\t\tradius = Math.hypot(point.x, point.y);\n\t\t\t\t}\n\t\t\t\telse if (behavior == \"zoomX\" || behavior == \"selectX\") {\n\t\t\t\t\tstartAngle = Math.atan2(downPoint.y, downPoint.x) * $math.DEGREES;\n\t\t\t\t\tendAngle = Math.atan2(point.y, point.x) * $math.DEGREES;\n\t\t\t\t}\n\t\t\t\telse if (behavior == \"zoomY\" || behavior == \"selectY\") {\n\t\t\t\t\tinnerRadius = Math.hypot(downPoint.x, downPoint.y);\n\t\t\t\t\tradius = Math.hypot(point.x, point.y);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tinnerRadius = $math.fitToRange(innerRadius, cursorInnerRadius, cursorRadius);\n\t\t\tradius = $math.fitToRange(radius, cursorInnerRadius, cursorRadius);\n\n\t\t\tstartAngle = $math.fitAngleToRange(startAngle, cursorStartAngle, cursorEndAngle);\n\t\t\tendAngle = $math.fitAngleToRange(endAngle, cursorStartAngle, cursorEndAngle);\n\n\t\t\tif (startAngle == endAngle) {\n\t\t\t\tendAngle = startAngle + 360;\n\t\t\t}\n\n\t\t\tstartAngle *= $math.RADIANS;\n\t\t\tendAngle *= $math.RADIANS;\n\n\t\t\tthis._fillGenerator.context(display as any);\n\t\t\tthis._fillGenerator({ innerRadius: innerRadius, outerRadius: radius, startAngle: startAngle + Math.PI / 2, endAngle: endAngle + Math.PI / 2 });\n\t\t})\n\t}\n}\n","import { LineSeries, ILineSeriesPrivate, ILineSeriesSettings, ILineSeriesDataItem, ILineSeriesAxisRange } from \"../xy/series/LineSeries\";\nimport type { IPoint } from \"../../core/util/IPoint\";\nimport type { AxisRendererCircular } from \"./AxisRendererCircular\";\nimport type { AxisRendererRadial } from \"./AxisRendererRadial\";\nimport type { Bullet } from \"../../core/render/Bullet\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport type { RadarChart } from \"./RadarChart\";\nimport type { DataItem } from \"../../core/render/Component\";\nimport * as $math from \"../../core/util/Math\";\n\nexport interface IRadarLineSeriesDataItem extends ILineSeriesDataItem {\n}\n\nexport interface IRadarLineSeriesSettings extends ILineSeriesSettings {\n\n\t/**\n\t * If set to `true` (default), series will connect its last data point to the\n\t * first one with a line, thus completing full circle.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/radar-series/#Connecting_ends} for more info\n\t * @default @true\n\t */\n\tconnectEnds?: boolean;\n\n}\n\nexport interface IRadarLineSeriesPrivate extends ILineSeriesPrivate {\n}\n\nexport interface IRadarLineSeriesAxisRange extends ILineSeriesAxisRange {\n}\n\n/**\n * Draws a line series for use in a [[RadarChart]].\n *\n * @important\n */\nexport class RadarLineSeries extends LineSeries {\n\n\tdeclare public _settings: IRadarLineSeriesSettings;\n\tdeclare public _privateSettings: IRadarLineSeriesPrivate;\n\tdeclare public _dataItemSettings: IRadarLineSeriesDataItem;\n\tdeclare public _axisRangeType: IRadarLineSeriesAxisRange;\n\n\t/**\n\t * A chart series belongs to.\n\t */\n\tdeclare public chart: RadarChart | undefined;\n\n\tpublic static className: string = \"RadarLineSeries\";\n\tpublic static classNames: Array<string> = LineSeries.classNames.concat([RadarLineSeries.className]);\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis.set(\"maskContent\", false);\n\t\tthis.bulletsContainer.set(\"maskContent\", false);\n\t\tthis.bulletsContainer.set(\"mask\", Graphics.new(this._root, {}));\n\t}\n\n\tprotected _handleMaskBullets() {\n\n\t}\n\n\tpublic getPoint(positionX: number, positionY: number): IPoint {\n\n\t\tconst yAxis = this.get(\"yAxis\");\n\t\tconst xAxis = this.get(\"xAxis\");\n\n\t\tconst rendererY = yAxis.get(\"renderer\") as AxisRendererRadial;\n\n\t\tconst radius = rendererY.positionToCoordinate(positionY) + rendererY.getPrivate(\"innerRadius\", 0);\n\n\t\tconst rendererX = xAxis.get(\"renderer\") as AxisRendererCircular;\n\t\tconst angle = rendererX.positionToAngle(positionX);\n\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\n\t}\n\n\tprotected _endLine(points: Array<Array<number>>, firstPoint: Array<number>) {\n\t\tif (this.get(\"connectEnds\") && firstPoint) {\n\t\t\tpoints.push(firstPoint);\n\t\t}\n\t}\n\n\n\tprotected _shouldInclude(position: number): boolean {\n\t\tconst xAxis = this.get(\"xAxis\");\n\t\tif (position < xAxis.get(\"start\") || position > xAxis.get(\"end\")) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprotected _shouldShowBullet(positionX: number, _positionY: number): boolean {\n\t\tconst xAxis = this.get(\"xAxis\");\n\t\tif (positionX < xAxis.get(\"start\") || positionX > xAxis.get(\"end\")) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this._showBullets;\n\t}\n\n\tpublic _positionBullet(bullet: Bullet) {\n\n\t\tlet sprite = bullet.get(\"sprite\");\n\t\tif (sprite) {\n\t\t\tlet dataItem = sprite.dataItem as DataItem<this[\"_dataItemSettings\"]>;\n\n\t\t\tlet locationX = bullet.get(\"locationX\", dataItem.get(\"locationX\", 0.5));\n\t\t\tlet locationY = bullet.get(\"locationY\", dataItem.get(\"locationY\", 0.5));\n\n\t\t\tlet xAxis = this.get(\"xAxis\");\n\t\t\tlet yAxis = this.get(\"yAxis\");\n\t\t\t//let baseAxis = this.get(\"baseAxis\");\n\n\t\t\t//if(xAxis == baseAxis){\n\t\t\t//locationY = 1;\n\t\t\t//}\n\t\t\t//else if(yAxis == baseAxis){\n\t\t\t//locationX = 1;\n\t\t\t//}\n\n\t\t\tconst positionX = xAxis.getDataItemPositionX(dataItem, this._xField, locationX, this.get(\"vcx\", 1));\n\t\t\tconst positionY = yAxis.getDataItemPositionY(dataItem, this._yField, locationY, this.get(\"vcy\", 1))\n\n\t\t\tlet point = this.getPoint(positionX, positionY);\n\n\t\t\tif (this._shouldShowBullet(positionX, positionY)) {\n\t\t\t\tsprite.setPrivate(\"visible\", true);\n\n\t\t\t\tsprite.set(\"x\", point.x);\n\t\t\t\tsprite.set(\"y\", point.y);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsprite.setPrivate(\"visible\", false);\n\t\t\t}\n\t\t}\n\t}\n}\n","export default function() {}\n","import noop from \"../noop.js\";\nimport {point} from \"./cardinal.js\";\n\nexport function CardinalClosed(context, tension) {\n  this._context = context;\n  this._k = (1 - tension) / 6;\n}\n\nCardinalClosed.prototype = {\n  areaStart: noop,\n  areaEnd: noop,\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =\n    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 1: {\n        this._context.moveTo(this._x3, this._y3);\n        this._context.closePath();\n        break;\n      }\n      case 2: {\n        this._context.lineTo(this._x3, this._y3);\n        this._context.closePath();\n        break;\n      }\n      case 3: {\n        this.point(this._x3, this._y3);\n        this.point(this._x4, this._y4);\n        this.point(this._x5, this._y5);\n        break;\n      }\n    }\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;\n      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;\n      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;\n      default: point(this, x, y); break;\n    }\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nexport default (function custom(tension) {\n\n  function cardinal(context) {\n    return new CardinalClosed(context, tension);\n  }\n\n  cardinal.tension = function(tension) {\n    return custom(+tension);\n  };\n\n  return cardinal;\n})(0);\n","import { RadarLineSeries, IRadarLineSeriesSettings, IRadarLineSeriesPrivate, IRadarLineSeriesDataItem } from \"./RadarLineSeries\";\nimport { curveCardinalClosed, CurveCardinalFactory, curveCardinal } from \"d3-shape\";\n\nexport interface ISmoothedRadarLineSeriesDataItem extends IRadarLineSeriesDataItem {\n}\n\nexport interface ISmoothedRadarLineSeriesSettings extends IRadarLineSeriesSettings {\n\n\t/**\n\t * Tension of curve.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/smoothed-series/#Line_tension} for more info\n\t * @default 0.5\n\t */\n\ttension?: number;\n\n\t/**\n\t * @ignore\n\t */\n\tcurveFactory?: CurveCardinalFactory\n\n}\n\nexport interface ISmoothedRadarLineSeriesPrivate extends IRadarLineSeriesPrivate {\n}\n\n/**\n * Draws a smoothed line series for use in a [[RadarChart]].\n *\n * @important\n */\nexport class SmoothedRadarLineSeries extends RadarLineSeries {\n\tpublic static className: string = \"SmoothedRadarLineSeries\";\n\tpublic static classNames: Array<string> = RadarLineSeries.classNames.concat([SmoothedRadarLineSeries.className]);\n\n\tdeclare public _settings: ISmoothedRadarLineSeriesSettings;\n\tdeclare public _privateSettings: ISmoothedRadarLineSeriesPrivate;\n\tdeclare public _dataItemSettings: ISmoothedRadarLineSeriesDataItem;\n\n\tprotected _afterNew() {\n\t\tthis._setDefault(\"curveFactory\", curveCardinalClosed.tension(this.get(\"tension\", 0)));\n\t\tsuper._afterNew();\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tif (this.isDirty(\"connectEnds\")) {\n\t\t\tconst connectEnds = this.get(\"connectEnds\");\n\t\t\tif (connectEnds) {\n\t\t\t\tthis.setRaw(\"curveFactory\", curveCardinalClosed.tension(this.get(\"tension\", 0)));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.setRaw(\"curveFactory\", curveCardinal.tension(this.get(\"tension\", 0)));\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"tension\")) {\n\t\t\tlet cf = this.get(\"curveFactory\")!;\n\t\t\tif (cf) {\n\t\t\t\tcf.tension(this.get(\"tension\", 0));\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _endLine(_points: Array<Array<number>>, _firstPoint: Array<number>) {\n\n\t}\n}\n","import * as m from \"./../../dist/es2015/radar.js\";\nexport const am5radar = m;"],"names":["AxisRendererCircular","AxisRenderer","List","Template","AxisLabelRadial","this","_root","themeTags","labels","template","get","Slice","axisFills","arc","_afterNew","_settings","super","setPrivateRaw","setRaw","_changed","isDirty","updateLayout","chart","radius","getPrivate","r","setPrivate","ir","startAngle","endAngle","set","display","p0","positionToPoint","moveTo","x","y","axis","markDirtySize","updateGrid","grid","position","endPosition","location","innerRadius","angle","positionToAngle","toggleVisibility","lineTo","start","end","_handleOpposite","updateLabel","label","count","fillDrawMethod","fill","y0","y1","_fillGenerator","context","outerRadius","updateTick","tick","length","updateBullet","bullet","sprite","setAll","rotation","updateFill","fitAngle","_setSoft","minAngle","Math","min","maxAngle","max","axisLength","abs","PI","positionTooltip","tooltip","_positionTooltip","updateTooltipBounds","_tooltip","className","AxisRendererRadial","processAxis","axisAngle","positionToCoordinate","point","hypot","_inversed","_end","_axisLength","_start","ClockHand","Container","children","push","Graphics","adapters","add","pin","graphics","parent","dataItem","component","cr","hand","bw","tw","Percent","_prepareChildren","_markDirtyKey","RadarDefaultTheme","Theme","setupDefaultRules","rule","bind","ic","interfaceColors","clustered","width","height","connectEnds","tension","minGridDistance","inversed","cellStartLocation","cellEndLocation","textType","paddingTop","paddingRight","paddingBottom","paddingLeft","centerX","centerY","text","populateText","textAlign","topWidth","bottomWidth","pinRadius","fillOpacity","RadarChart","XYChart","plotContainer","_defaultThemes","radarContainer","gridContainer","topGridContainer","seriesContainer","bulletsContainer","pushAll","_disposers","events","on","_updateRadius","_maskGrid","_sizeDirty","chartContainer","w","innerWidth","h","innerHeight","bounds","wr","right","left","hr","bottom","top","innerBounds","value","mr","_maxRadius","dy","dx","_addCursor","cursor","xAxes","each","yAxes","_updateMask","series","remove","container","mask","_arcGenerator","inPlot","atan2","inArc","_tooltipToLocal","_display","toLocal","_handlePinch","RadarColumnSeries","BaseColumnSeries","columns","makeColumn","listTemplate","column","mainContainer","make","_setDataItem","getPoint","positionX","positionY","yAxis","xAxis","rendererY","_updateSeriesGraphics","l","t","b","rendererX","axisInnerRadius","slice","axisStartAngle","axisEndAngle","_shouldInclude","_shouldShowBullet","_positionY","_showBullets","_positionBullet","locationX","locationY","getDataItemPositionX","_xField","getDataItemPositionY","_yField","_handleMaskBullets","_processAxisRange","axisRange","RadarCursor","XYCursor","_handleXLine","_handleYLine","_getPosition","xPos","_getPoint","_updateLines","_tooltipX","_drawXLine","_tooltipY","_drawYLine","lineX","cos","sin","positionRadius","lineY","_updateXLine","_updateYLine","_inPlot","_updateSelection","selection","behavior","downPoint","_downPoint","cursorStartAngle","cursorEndAngle","cursorRadius","cursorInnerRadius","RadarLineSeries","LineSeries","_endLine","points","firstPoint","CardinalClosed","_context","_k","prototype","areaStart","noop","areaEnd","lineStart","_x0","_x1","_x2","_x3","_x4","_x5","_y0","_y1","_y2","_y3","_y4","_y5","NaN","_point","lineEnd","closePath","custom","cardinal","SmoothedRadarLineSeries","_setDefault","cf","_points","_firstPoint","classNames","concat","am5radar"],"sourceRoot":""}